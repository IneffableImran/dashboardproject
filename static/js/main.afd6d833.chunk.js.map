{"version":3,"sources":["component/Widget1.js","component/Widget2.js","component/MapChart.js","component/Widget3.js","component/CombinedWidget1.js","component/Header.js","App.js","serviceWorker.js","index.js"],"names":["Widget1","props","handleChange","event","value","console","log","target","setState","options","state","chart","type","xaxis","categories","series","name","data","className","this","onChange","width","Component","Widget2","labels","MapChart","zoom","geography","geographies","map","geo","key","rsmKey","Widget3","CombinedWidget","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Header","classes","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","App","CombinedWidget1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afd6d833.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport './style.css'\nclass Widget1 extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {\n                chart: {\n                    type: 'line'\n                },\n                xaxis: {\n                    categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998]\n                }\n            },\n            series: [\n                {\n                    name: \"series-1\",\n                    data: [30, 40, 45, 50, 49, 60, 70, 91]\n                }\n            ]\n        };\n    }\n\n    handleChange = (event, value) => {\n        console.log(event.target.value)\n        this.setState({ value: event.target.value })\n        this.setState({\n            options: {\n                ...this.state.options,\n                chart: { type: event.target.value }\n            }\n        })\n    }\n\n    render() {\n        return (\n            <>\n             <div>\n                <div>\n                    <h1>Widget: {\"1\"}</h1>\n                </div>\n                <h1>Description : {\"Chart (Line/Bar/Area)\"}</h1>\n                \n                <hr />\n                <div className=\"app\">\n                    <div className=\"row\">\n                        <div className=\"mixed-chart\">\n                            <select value={this.state.value} onChange={this.handleChange}>\n                                <option value=\"line\" >Line</option>\n                                <option value=\"bar\">Bar</option>\n                                <option value=\"area\">Area</option>\n                            </select>\n\n                            <Chart\n                                options={this.state.options}\n                                series={this.state.series}\n                                type={this.state.options.chart.type}\n                                width=\"500\"\n                            />\n\n                        </div>\n                    </div>\n                </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Widget1;\n","import React, { Component } from 'react';\nimport Chart from \"react-apexcharts\";\nimport './style.css'\n\nclass Widget2 extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {\n                chart: {\n                    type: 'donut'\n                },\n            },\n            series: [44, 55, 41, 17, 15],\n            labels: ['A', 'B', 'C', 'D', 'E']\n        }\n    }\n\n    handleChange = (event, value) => {\n        console.log(event.target.value)\n        this.setState({ value: event.target.value })\n        this.setState({\n            options: {\n                ...this.state.options,\n                chart: { type: event.target.value }\n            }\n        })\n    }\n\n    render() {\n\n        return (\n            <>\n                <div>\n                <div>\n                    <h1>Widget: {\"2\"}</h1>\n                </div>\n                <h1>Description : {\"Chart (Donut/Pie)\"}</h1>\n                <hr />\n                <div className=\"donut\">\n\n                    <select value={this.state.value} onChange={this.handleChange}>\n                        <option value=\"donut\">Donut</option>\n                        <option value=\"pie\">Pie</option>\n                    </select>\n\n\n                    <Chart options={this.state.options}\n                        series={this.state.series}\n                        type={this.state.options.chart.type}\n                        width=\"380\" />\n                </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Widget2;\n\n\n","import React, { Component } from 'react';\nimport {ComposableMap, Geographies,Geography,ZoomableGroup} from \"react-simple-maps\";\nimport './style.css'\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n\nclass MapChart extends Component {\n    render() {\n        return (\n            <div>\n                <ComposableMap>\n                    <ZoomableGroup zoom={1}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => \n                                geographies.map(geo => (\n                                    <Geography key={geo.rsmKey} geography={geo} />\n                                ))\n                            }\n                        </Geographies>\n                    </ZoomableGroup>\n                </ComposableMap>\n            </div>\n        );\n    }\n}\n\nexport default MapChart;","import React, { Component } from 'react';\nimport MapChart from \"./MapChart\";\nimport './style.css';\nclass Widget3 extends Component {\n    render() {\n        return (\n            <>\n            <div>\n                <div>\n                    <h1>Widget: {\"3\"}</h1>\n                </div>\n                <h1>Description : {\"World Map\"}</h1>\n                <hr />\n                <MapChart />\n            </div>\n            </>\n        );\n    }\n}\n\nexport default Widget3;\n","import React, { Component } from 'react';\nimport Widget1 from './Widget1';\nimport Widget2 from './Widget2';\nimport Widget3 from './Widget3';\n\nclass CombinedWidget extends Component {\n\n    render() {\n        return (\n            <>\n                <div className=\"main-container\">\n                    <Widget1 />\n                    <Widget2 />\n                    <Widget3 />\n                </div>\n\n            </>\n        );\n    }\n}\n\nexport default CombinedWidget;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            {/* <MenuIcon /> */}\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            <h1>Analytics Dashboard</h1>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport CombinedWidget1 from './component/CombinedWidget1';\nimport Headers from './component/Header';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Headers />\n       <CombinedWidget1/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}